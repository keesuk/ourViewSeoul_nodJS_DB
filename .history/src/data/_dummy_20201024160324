
대흥,Daeheung
군자,Gunja
망원,Mangwon
합정,Hapjeong
상수,Sangsu
광흥창,Gwangheungchang
종로3가,Jongno3samga
둔촌동,Dunchondong
올림픽공원,OlympicPark
미사,Misa
하남풍산,HanamPungsan
응암,Eungam
역촌,Yeokchon
불광,Bulgwang
청담,Cheongdam
충무로,Chungmuro
명동,Myeongdong
회현,Hoehyeon
서울역,SeoulStation
숙대입구,SookmyungWomensUniv
삼각지,Samgakji
신용산,Sinyongsan
동작,Dongjak
총신대입구,ChongshinUniv
사당,Sadang
남영,Namyeong
용산,Yongsan







// var USERNAME = "bsuser7501964";
// var AUTOMATE_KEY = "Hs9zsscQrVxbM8oFkRLa";
// var browserstackURL = 'https://' + USERNAME + ':' + AUTOMATE_KEY + '@hub-cloud.browserstack.com/wd/hub';
// var capabilities = {
          
//     'os' : 'OS X',
//     'os_version' : 'Catalina',
//     'browserName' : 'Chrome',
//     'browser_version' : '80',
//     'browserstack.use_w3c' : 'true',
//     'name' : "bsuser7501964's First Test"
    
//   }





    function loadJSON(filename = '') {
        return JSON.parse(
            fs.existsSync(filename)
                ? fs.readFileSync(filename).toString()
                : '""'
        )
    }

    function saveJSON(filename = '', json = '""') {
        return fs.writeFileSync(
            filename, 
            JSON.stringify(
                json, 
                null, 
                2
            ))
    }
    
    const seoul = loadJSON('./src/data/seoul.json')
    const obj = { list : []}
    Object.assign(seoul.list, obj)
    saveJSON('./src/data/seoul.json', seoul)





    var express = require('express');
var router = express.Router();
const Multer = require('multer');
const multer = Multer({
    storage: Multer.memoryStorage(),
    limits: {
        fileSize: 5 * 1024 * 1024 // no larger than 5mb, you can change as needed.
    }
});

const Storage = require('@google-cloud/storage');

const storage = Storage({
    keyFilename: 'server/firebase-service-account.json',
    projectId: process.env.FIREBASE_PROJECT_ID
});

const bucket = storage.bucket(process.env.FIREBASE_STORAGE_BUCKET);

// Process the file upload and upload to Google Cloud Storage.
router.post('/', multer.single('file'), (req, res, next) => {
    console.log('req.body', req.body);
    console.log('req.file', req.file);
    if (!req.file) {
        res.status(400).send('No file uploaded.');
        return;
    }

    // Create a new blob in the bucket and upload the file data.
    const blob = bucket.file(req.file.originalname);
    const blobStream = blob.createWriteStream();

    blobStream.on('error', (err) => {
        next(err);
        return;
    });

    blobStream.on('finish', () => {
        res.status(200).send('The image has been successfully uploaded to google cloud storage');
    });

    blobStream.end(req.file.buffer);
});

router.get('/:imageId', function (req, res, next) {
    var stream = bucket.file('Toast.jpg').createReadStream();

    res.writeHead(200, {'Content-Type': 'image/jpg' });

    stream.on('data', function (data) {
        res.write(data);
    });

    stream.on('error', function (err) {
        console.log('error reading stream', err);
    });

    stream.on('end', function () {
        res.end();
    });
});

module.exports = router;